// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/k8s.proto

/*
Package k8s is a generated protocol buffer package.

It is generated from these files:
	proto/k8s.proto

It has these top-level messages:
	Event
	Task
	K8SMessage
*/
package k8s

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for K8S service

type K8SService interface {
	// k8s task stream
	K8Task(ctx context.Context, opts ...client.CallOption) (K8S_K8TaskService, error)
}

type k8SService struct {
	c    client.Client
	name string
}

func NewK8SService(name string, c client.Client) K8SService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "k8s"
	}
	return &k8SService{
		c:    c,
		name: name,
	}
}

func (c *k8SService) K8Task(ctx context.Context, opts ...client.CallOption) (K8S_K8TaskService, error) {
	req := c.c.NewRequest(c.name, "K8S.K8Task", &K8SMessage{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &k8SServiceK8Task{stream}, nil
}

type K8S_K8TaskService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*K8SMessage) error
	Recv() (*Task, error)
}

type k8SServiceK8Task struct {
	stream client.Stream
}

func (x *k8SServiceK8Task) Close() error {
	return x.stream.Close()
}

func (x *k8SServiceK8Task) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *k8SServiceK8Task) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *k8SServiceK8Task) Send(m *K8SMessage) error {
	return x.stream.Send(m)
}

func (x *k8SServiceK8Task) Recv() (*Task, error) {
	m := new(Task)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for K8S service

type K8SHandler interface {
	// k8s task stream
	K8Task(context.Context, K8S_K8TaskStream) error
}

func RegisterK8SHandler(s server.Server, hdlr K8SHandler, opts ...server.HandlerOption) error {
	type k8S interface {
		K8Task(ctx context.Context, stream server.Stream) error
	}
	type K8S struct {
		k8S
	}
	h := &k8SHandler{hdlr}
	return s.Handle(s.NewHandler(&K8S{h}, opts...))
}

type k8SHandler struct {
	K8SHandler
}

func (h *k8SHandler) K8Task(ctx context.Context, stream server.Stream) error {
	return h.K8SHandler.K8Task(ctx, &k8SK8TaskStream{stream})
}

type K8S_K8TaskStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Task) error
	Recv() (*K8SMessage, error)
}

type k8SK8TaskStream struct {
	stream server.Stream
}

func (x *k8SK8TaskStream) Close() error {
	return x.stream.Close()
}

func (x *k8SK8TaskStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *k8SK8TaskStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *k8SK8TaskStream) Send(m *Task) error {
	return x.stream.Send(m)
}

func (x *k8SK8TaskStream) Recv() (*K8SMessage, error) {
	m := new(K8SMessage)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

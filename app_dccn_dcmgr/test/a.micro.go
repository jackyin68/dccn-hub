// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: a.email

/*
Package a is a generated protocol buffer package.

It is generated from these files:
	a.email

It has these top-level messages:
	Request
	Response
*/
package a

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"

	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the email package it is being compiled against.
// A compilation error at this line likely means your copy of the
// email package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the email package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for DcMgr service

type DcMgrService interface {
	Stream(ctx context.Context, opts ...client.CallOption) (DcMgr_StreamService, error)
	ServerStream(ctx context.Context, in *Request, opts ...client.CallOption) (DcMgr_ServerStreamService, error)
}

type dcMgrService struct {
	c    client.Client
	name string
}

func NewDcMgrService(name string, c client.Client) DcMgrService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "dcmgr"
	}
	return &dcMgrService{
		c:    c,
		name: name,
	}
}

func (c *dcMgrService) Stream(ctx context.Context, opts ...client.CallOption) (DcMgr_StreamService, error) {
	req := c.c.NewRequest(c.name, "DcMgr.Stream", &Request{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &dcMgrServiceStream{stream}, nil
}

type DcMgr_StreamService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Request) error
	Recv() (*Response, error)
}

type dcMgrServiceStream struct {
	stream client.Stream
}

func (x *dcMgrServiceStream) Close() error {
	return x.stream.Close()
}

func (x *dcMgrServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *dcMgrServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *dcMgrServiceStream) Send(m *Request) error {
	return x.stream.Send(m)
}

func (x *dcMgrServiceStream) Recv() (*Response, error) {
	m := new(Response)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dcMgrService) ServerStream(ctx context.Context, in *Request, opts ...client.CallOption) (DcMgr_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "DcMgr.ServerStream", &Request{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &dcMgrServiceServerStream{stream}, nil
}

type DcMgr_ServerStreamService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*Response, error)
}

type dcMgrServiceServerStream struct {
	stream client.Stream
}

func (x *dcMgrServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *dcMgrServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *dcMgrServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *dcMgrServiceServerStream) Recv() (*Response, error) {
	m := new(Response)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for DcMgr service

type DcMgrHandler interface {
	Stream(context.Context, DcMgr_StreamStream) error
	ServerStream(context.Context, *Request, DcMgr_ServerStreamStream) error
}

func RegisterDcMgrHandler(s server.Server, hdlr DcMgrHandler, opts ...server.HandlerOption) error {
	type dcMgr interface {
		Stream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
	}
	type DcMgr struct {
		dcMgr
	}
	h := &dcMgrHandler{hdlr}
	return s.Handle(s.NewHandler(&DcMgr{h}, opts...))
}

type dcMgrHandler struct {
	DcMgrHandler
}

func (h *dcMgrHandler) Stream(ctx context.Context, stream server.Stream) error {
	return h.DcMgrHandler.Stream(ctx, &dcMgrStreamStream{stream})
}

type DcMgr_StreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Response) error
	Recv() (*Request, error)
}

type dcMgrStreamStream struct {
	stream server.Stream
}

func (x *dcMgrStreamStream) Close() error {
	return x.stream.Close()
}

func (x *dcMgrStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *dcMgrStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *dcMgrStreamStream) Send(m *Response) error {
	return x.stream.Send(m)
}

func (x *dcMgrStreamStream) Recv() (*Request, error) {
	m := new(Request)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *dcMgrHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(Request)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.DcMgrHandler.ServerStream(ctx, m, &dcMgrServerStreamStream{stream})
}

type DcMgr_ServerStreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Response) error
}

type dcMgrServerStreamStream struct {
	stream server.Stream
}

func (x *dcMgrServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *dcMgrServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *dcMgrServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *dcMgrServerStreamStream) Send(m *Response) error {
	return x.stream.Send(m)
}

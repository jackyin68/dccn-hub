syntax = "proto3";

package taskmgr;

import "google/api/annotations.proto";

service TaskMgr {
    rpc AddTask (AddTaskRequest) returns (AddTaskResponse) {
        option (google.api.http) = {
			post: "/taskmgr/add"
			body: "*"
		};
    }

    rpc CancelTask (CancelTaskRequest) returns (CancelTaskResponse) {
        option (google.api.http) = {
                post: "/taskmgr/cancel"
                body: "*"
            };
    }

    rpc UpdateTask (UpdateTaskRequest) returns (UpdateTaskResponse) {
        option (google.api.http) = {
                post: "/taskmgr/update"
                body: "*"
            };
    }

    rpc TaskList (TaskListRequest) returns (TaskListResponse) {
        option (google.api.http) = {
                post: "/taskmgr/list"
                body: "*"
            };
    }

    rpc TaskDetail (TaskDetailRequest) returns (TaskDetailResponse) {
        option (google.api.http) = {
                post: "/taskmgr/detail"
                body: "*"
            };
    }
}

enum OpCode {
    ADD = 0;
    CANCEL = 1;
    UPDATE = 2;
    LIST = 3;
    DETAIL = 4;
}

//Pub/Sub Event
message Event {
    // unique id
    string id = 1;
    // unix timestamp
    int64 timestamp = 2;
    // message
    string message = 3;
    // Operation code
    OpCode op = 4;
}

// The dccn client request message containing the user's token
message AddTaskRequest {
    string name = 1; // name of the task/image to run
    string type = 2; // default or "web" as website
    string datacenter = 3; // default or  datacenter name
    string usertoken = 4; //user account, alphanumeric chars, may not be used now for authentication
    int64 replica = 5;   // how many replica of docker instance
}

// The Ankr Hub response message containing the success or failure
message AddTaskResponse{
    string status = 1; // Success or Failure
    int64 taskid = 2; //  id of task if success, in case of failure return -1
}

// The Client List request message
message TaskListRequest {
    string usertoken = 1; // List task for the account
}

message TaskInfo {
    int64  taskid = 1;
    string taskname = 2; // List task for the account
    uint32 uptime = 3; // uptime of the task
    uint64 creationdate = 4; //task creation date
    string status = 5; // Active or inactive, Right now all tasks active
    string datacenter = 6;
    int64 replica = 7;  //
}

message TaskListResponse{
    repeated TaskInfo tasksinfo = 1; // repeated groups of taskinfo list
}

message CancelTaskRequest {
    string usertoken = 1;
    int64  taskid = 2;
}

message CancelTaskResponse{
    string status = 1; // Success or Failure
}

message UpdateTaskRequest {
    string usertoken = 1;
    int64  taskid = 2;
    string name = 3;
    int64 replica = 4;
}

message UpdateTaskResponse{
    string status = 1; // Success or Failure
}

message TaskDetailRequest{
    int64 taskid = 2;
    string usertoken = 1;
}

message TaskDetailResponse{
    string body = 1;
}

message Task{
    string Type = 1;  //"NewTask"  "CancelTask"  "UpdateTask"
    int64 taskid = 2;  //id of task
    string taskType = 3; // default or "web"
    string name = 4;  // UniqueName of the task as taskid
    string image = 5; // name of docker image
    int64 replica = 6;
    string extra = 7; //extra for other arguments
}

message TaskResult {
    /* task_id identifies a unique task */
    string task_id = 1;
    /* user_id indicates the user to whom the task belongs */
    string user_id = 2;
    /* result Results of the calculation */
    int64 result = 3;
}

// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/taskmgr/taskmgr.proto

/*
Package go_micro_srv_taskmgr is a generated protocol buffer package.

It is generated from these files:
	proto/taskmgr/taskmgr.proto

It has these top-level messages:
	ID
	Task
	Response
	Event
*/
package go_micro_srv_taskmgr

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for TaskMgr service

type TaskMgrService interface {
	Get(ctx context.Context, in *ID, opts ...client.CallOption) (*Task, error)
	Create(ctx context.Context, in *Task, opts ...client.CallOption) (*Response, error)
	Cancel(ctx context.Context, in *ID, opts ...client.CallOption) (*Response, error)
	Update(ctx context.Context, in *Task, opts ...client.CallOption) (*Response, error)
}

type taskMgrService struct {
	c    client.Client
	name string
}

func NewTaskMgrService(name string, c client.Client) TaskMgrService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.taskmgr"
	}
	return &taskMgrService{
		c:    c,
		name: name,
	}
}

func (c *taskMgrService) Get(ctx context.Context, in *ID, opts ...client.CallOption) (*Task, error) {
	req := c.c.NewRequest(c.name, "TaskMgr.Get", in)
	out := new(Task)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskMgrService) Create(ctx context.Context, in *Task, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "TaskMgr.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskMgrService) Cancel(ctx context.Context, in *ID, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "TaskMgr.Cancel", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskMgrService) Update(ctx context.Context, in *Task, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "TaskMgr.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TaskMgr service

type TaskMgrHandler interface {
	Get(context.Context, *ID, *Task) error
	Create(context.Context, *Task, *Response) error
	Cancel(context.Context, *ID, *Response) error
	Update(context.Context, *Task, *Response) error
}

func RegisterTaskMgrHandler(s server.Server, hdlr TaskMgrHandler, opts ...server.HandlerOption) error {
	type taskMgr interface {
		Get(ctx context.Context, in *ID, out *Task) error
		Create(ctx context.Context, in *Task, out *Response) error
		Cancel(ctx context.Context, in *ID, out *Response) error
		Update(ctx context.Context, in *Task, out *Response) error
	}
	type TaskMgr struct {
		taskMgr
	}
	h := &taskMgrHandler{hdlr}
	return s.Handle(s.NewHandler(&TaskMgr{h}, opts...))
}

type taskMgrHandler struct {
	TaskMgrHandler
}

func (h *taskMgrHandler) Get(ctx context.Context, in *ID, out *Task) error {
	return h.TaskMgrHandler.Get(ctx, in, out)
}

func (h *taskMgrHandler) Create(ctx context.Context, in *Task, out *Response) error {
	return h.TaskMgrHandler.Create(ctx, in, out)
}

func (h *taskMgrHandler) Cancel(ctx context.Context, in *ID, out *Response) error {
	return h.TaskMgrHandler.Cancel(ctx, in, out)
}

func (h *taskMgrHandler) Update(ctx context.Context, in *Task, out *Response) error {
	return h.TaskMgrHandler.Update(ctx, in, out)
}

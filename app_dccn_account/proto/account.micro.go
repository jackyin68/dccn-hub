// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/account.proto

/*
Package accountmgr is a generated protocol buffer package.

It is generated from these files:
	proto/account.proto

It has these top-level messages:
	Empty
	Name
	Account
	Accounts
	Response
	Token
	Error
*/
package accountmgr

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AccountMgr service

type AccountMgrService interface {
	// New Create a new Account
	New(ctx context.Context, in *Account, opts ...client.CallOption) (*Response, error)
	// Gets the specified Account
	Get(ctx context.Context, in *Name, opts ...client.CallOption) (*Response, error)
	// Auth  validates Account
	Auth(ctx context.Context, in *Account, opts ...client.CallOption) (*Token, error)
	// ValidateToken Validated Token
	ValidateToken(ctx context.Context, in *Token, opts ...client.CallOption) (*Token, error)
}

type accountMgrService struct {
	c    client.Client
	name string
}

func NewAccountMgrService(name string, c client.Client) AccountMgrService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "accountmgr"
	}
	return &accountMgrService{
		c:    c,
		name: name,
	}
}

func (c *accountMgrService) New(ctx context.Context, in *Account, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AccountMgr.New", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrService) Get(ctx context.Context, in *Name, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AccountMgr.Get", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrService) Auth(ctx context.Context, in *Account, opts ...client.CallOption) (*Token, error) {
	req := c.c.NewRequest(c.name, "AccountMgr.Auth", in)
	out := new(Token)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountMgrService) ValidateToken(ctx context.Context, in *Token, opts ...client.CallOption) (*Token, error) {
	req := c.c.NewRequest(c.name, "AccountMgr.ValidateToken", in)
	out := new(Token)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccountMgr service

type AccountMgrHandler interface {
	// New Create a new Account
	New(context.Context, *Account, *Response) error
	// Gets the specified Account
	Get(context.Context, *Name, *Response) error
	// Auth  validates Account
	Auth(context.Context, *Account, *Token) error
	// ValidateToken Validated Token
	ValidateToken(context.Context, *Token, *Token) error
}

func RegisterAccountMgrHandler(s server.Server, hdlr AccountMgrHandler, opts ...server.HandlerOption) error {
	type accountMgr interface {
		New(ctx context.Context, in *Account, out *Response) error
		Get(ctx context.Context, in *Name, out *Response) error
		Auth(ctx context.Context, in *Account, out *Token) error
		ValidateToken(ctx context.Context, in *Token, out *Token) error
	}
	type AccountMgr struct {
		accountMgr
	}
	h := &accountMgrHandler{hdlr}
	return s.Handle(s.NewHandler(&AccountMgr{h}, opts...))
}

type accountMgrHandler struct {
	AccountMgrHandler
}

func (h *accountMgrHandler) New(ctx context.Context, in *Account, out *Response) error {
	return h.AccountMgrHandler.New(ctx, in, out)
}

func (h *accountMgrHandler) Get(ctx context.Context, in *Name, out *Response) error {
	return h.AccountMgrHandler.Get(ctx, in, out)
}

func (h *accountMgrHandler) Auth(ctx context.Context, in *Account, out *Token) error {
	return h.AccountMgrHandler.Auth(ctx, in, out)
}

func (h *accountMgrHandler) ValidateToken(ctx context.Context, in *Token, out *Token) error {
	return h.AccountMgrHandler.ValidateToken(ctx, in, out)
}

// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/usermgr/usermgr.proto

/*
Package go_micro_api_usermgr is a generated protocol buffer package.

It is generated from these files:
	proto/usermgr/usermgr.proto

It has these top-level messages:
	LoginRequest
	Email
	User
	Response
	Token
*/
package go_micro_api_usermgr

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserApi service

type UserApiService interface {
	// Login login
	Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*User, error)
	// Create Create a new user
	Create(ctx context.Context, in *User, opts ...client.CallOption) (*Response, error)
	// Gets the specified user by email
	Get(ctx context.Context, in *Email, opts ...client.CallOption) (*User, error)
	// Auth  validates user
	NewToken(ctx context.Context, in *User, opts ...client.CallOption) (*Token, error)
	// VerifyToken Validated Token
	VerifyToken(ctx context.Context, in *Token, opts ...client.CallOption) (*Response, error)
}

type userApiService struct {
	c    client.Client
	name string
}

func NewUserApiService(name string, c client.Client) UserApiService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.api.usermgr"
	}
	return &userApiService{
		c:    c,
		name: name,
	}
}

func (c *userApiService) Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "UserApi.Login", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userApiService) Create(ctx context.Context, in *User, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UserApi.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userApiService) Get(ctx context.Context, in *Email, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "UserApi.Get", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userApiService) NewToken(ctx context.Context, in *User, opts ...client.CallOption) (*Token, error) {
	req := c.c.NewRequest(c.name, "UserApi.NewToken", in)
	out := new(Token)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userApiService) VerifyToken(ctx context.Context, in *Token, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UserApi.VerifyToken", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserApi service

type UserApiHandler interface {
	// Login login
	Login(context.Context, *LoginRequest, *User) error
	// Create Create a new user
	Create(context.Context, *User, *Response) error
	// Gets the specified user by email
	Get(context.Context, *Email, *User) error
	// Auth  validates user
	NewToken(context.Context, *User, *Token) error
	// VerifyToken Validated Token
	VerifyToken(context.Context, *Token, *Response) error
}

func RegisterUserApiHandler(s server.Server, hdlr UserApiHandler, opts ...server.HandlerOption) error {
	type userApi interface {
		Login(ctx context.Context, in *LoginRequest, out *User) error
		Create(ctx context.Context, in *User, out *Response) error
		Get(ctx context.Context, in *Email, out *User) error
		NewToken(ctx context.Context, in *User, out *Token) error
		VerifyToken(ctx context.Context, in *Token, out *Response) error
	}
	type UserApi struct {
		userApi
	}
	h := &userApiHandler{hdlr}
	return s.Handle(s.NewHandler(&UserApi{h}, opts...))
}

type userApiHandler struct {
	UserApiHandler
}

func (h *userApiHandler) Login(ctx context.Context, in *LoginRequest, out *User) error {
	return h.UserApiHandler.Login(ctx, in, out)
}

func (h *userApiHandler) Create(ctx context.Context, in *User, out *Response) error {
	return h.UserApiHandler.Create(ctx, in, out)
}

func (h *userApiHandler) Get(ctx context.Context, in *Email, out *User) error {
	return h.UserApiHandler.Get(ctx, in, out)
}

func (h *userApiHandler) NewToken(ctx context.Context, in *User, out *Token) error {
	return h.UserApiHandler.NewToken(ctx, in, out)
}

func (h *userApiHandler) VerifyToken(ctx context.Context, in *Token, out *Response) error {
	return h.UserApiHandler.VerifyToken(ctx, in, out)
}

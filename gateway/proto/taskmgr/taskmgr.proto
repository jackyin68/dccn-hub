syntax = "proto3";

package go.micro.api.taskmgr;

service TaskApi {
    rpc Get(ID) returns (Task) {
    }

    rpc Create(Task) returns (Response) {
    }

    rpc Cancel(ID) returns (Response) {
    }

    rpc Update(Task) returns (Response) {
    }
}

message ID {
    int64 id = 1;
}

message Task {
    enum Status {
        CREATING = 0;
        CREATED = 1;
        RUNNING = 2;
        CANCELING = 3;
        CANCELED = 4;
        UPDATING = 5;
        UPDATED = 6;
        FAILURE = 7;
        SUCCESS = 8;
    }
    // id task id, unique.
    int64 id = 1;
    // event_id the flag of updating task info.
    // filter log with event id
    string event_id = 2;
    // user_id the task belongs.
    int64 user_id = 3;
    // name task name
    string name = 4;
    // task type
    string type = 5;
    // status [CREATING,RUNNING,CANCELING,CANCELED,UPDATING,UPDATED,FAILURE,SUCCESS]
    Status status = 6;
     // startup time of the this task
    uint32 startup_time = 7;
    // mission data center id
    int64 data_center_id = 8;
     // task creation date
    uint64 create_time = 9;
    // task cancel date
    uint64 cancel_time = 10;
    // task update date
    uint64 update_time = 11;
    // task returns date
    uint64 return_time = 12;
    // extra for other arguments
    bytes extra = 13;
    // result of the task
    bytes result = 14;
}

message Response {
}

message Event {
    enum OpCode {
        CREATE = 0;
        CANCEL = 1;
        UPDATE = 2;
        RETURN = 3;
        REFUSED = 4;
    }
    // unique id
    string id = 1;
    // event based on task_id.
    int64 task_id = 2;
    // unix timestamp
    int64 timestamp = 3;
    // operation code []
    OpCode operation = 4;
    // data_center_id task's executer dc
    int64 data_center_id = 5;
    // modify_time status's change time
    int64 modify_time = 6;
    // result task result
    bytes result = 7;
}

// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/dcmgr/dcmgr.proto

/*
Package go_micro_api_dcmgr is a generated protocol buffer package.

It is generated from these files:
	proto/dcmgr/dcmgr.proto

It has these top-level messages:
	ID
	All
	Request
	DataCenter
	Response
*/
package go_micro_api_dcmgr

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for DcMgrApi service

type DcMgrApiService interface {
	//    Get gets a DataCenter by ID
	Get(ctx context.Context, in *ID, opts ...client.CallOption) (*DataCenter, error)
	Add(ctx context.Context, in *DataCenter, opts ...client.CallOption) (*Response, error)
	Update(ctx context.Context, in *DataCenter, opts ...client.CallOption) (*Response, error)
}

type dcMgrApiService struct {
	c    client.Client
	name string
}

func NewDcMgrApiService(name string, c client.Client) DcMgrApiService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.api.dcmgr"
	}
	return &dcMgrApiService{
		c:    c,
		name: name,
	}
}

func (c *dcMgrApiService) Get(ctx context.Context, in *ID, opts ...client.CallOption) (*DataCenter, error) {
	req := c.c.NewRequest(c.name, "DcMgrApi.Get", in)
	out := new(DataCenter)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dcMgrApiService) Add(ctx context.Context, in *DataCenter, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "DcMgrApi.Add", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dcMgrApiService) Update(ctx context.Context, in *DataCenter, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "DcMgrApi.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DcMgrApi service

type DcMgrApiHandler interface {
	//    Get gets a DataCenter by ID
	Get(context.Context, *ID, *DataCenter) error
	Add(context.Context, *DataCenter, *Response) error
	Update(context.Context, *DataCenter, *Response) error
}

func RegisterDcMgrApiHandler(s server.Server, hdlr DcMgrApiHandler, opts ...server.HandlerOption) error {
	type dcMgrApi interface {
		Get(ctx context.Context, in *ID, out *DataCenter) error
		Add(ctx context.Context, in *DataCenter, out *Response) error
		Update(ctx context.Context, in *DataCenter, out *Response) error
	}
	type DcMgrApi struct {
		dcMgrApi
	}
	h := &dcMgrApiHandler{hdlr}
	return s.Handle(s.NewHandler(&DcMgrApi{h}, opts...))
}

type dcMgrApiHandler struct {
	DcMgrApiHandler
}

func (h *dcMgrApiHandler) Get(ctx context.Context, in *ID, out *DataCenter) error {
	return h.DcMgrApiHandler.Get(ctx, in, out)
}

func (h *dcMgrApiHandler) Add(ctx context.Context, in *DataCenter, out *Response) error {
	return h.DcMgrApiHandler.Add(ctx, in, out)
}

func (h *dcMgrApiHandler) Update(ctx context.Context, in *DataCenter, out *Response) error {
	return h.DcMgrApiHandler.Update(ctx, in, out)
}

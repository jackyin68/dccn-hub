// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/k8s/k8s.proto

package k8s

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Event struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5101ab27d64dc5d, []int{0}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

type Task struct {
	Type                 string   `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Taskid               int64    `protobuf:"varint,2,opt,name=taskid,proto3" json:"taskid,omitempty"`
	TaskType             string   `protobuf:"bytes,3,opt,name=taskType,proto3" json:"taskType,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Image                string   `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	Replica              int64    `protobuf:"varint,6,opt,name=replica,proto3" json:"replica,omitempty"`
	Extra                string   `protobuf:"bytes,7,opt,name=extra,proto3" json:"extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5101ab27d64dc5d, []int{1}
}

func (m *Task) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Task.Unmarshal(m, b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Task.Marshal(b, m, deterministic)
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return xxx_messageInfo_Task.Size(m)
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Task) GetTaskid() int64 {
	if m != nil {
		return m.Taskid
	}
	return 0
}

func (m *Task) GetTaskType() string {
	if m != nil {
		return m.TaskType
	}
	return ""
}

func (m *Task) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Task) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Task) GetReplica() int64 {
	if m != nil {
		return m.Replica
	}
	return 0
}

func (m *Task) GetExtra() string {
	if m != nil {
		return m.Extra
	}
	return ""
}

type K8SMessage struct {
	Type                 string   `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Taskid               int64    `protobuf:"varint,2,opt,name=taskid,proto3" json:"taskid,omitempty"`
	Taskname             string   `protobuf:"bytes,3,opt,name=taskname,proto3" json:"taskname,omitempty"`
	Status               string   `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Datacenter           string   `protobuf:"bytes,5,opt,name=datacenter,proto3" json:"datacenter,omitempty"`
	Url                  string   `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	Report               string   `protobuf:"bytes,7,opt,name=report,proto3" json:"report,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *K8SMessage) Reset()         { *m = K8SMessage{} }
func (m *K8SMessage) String() string { return proto.CompactTextString(m) }
func (*K8SMessage) ProtoMessage()    {}
func (*K8SMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5101ab27d64dc5d, []int{2}
}

func (m *K8SMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_K8SMessage.Unmarshal(m, b)
}
func (m *K8SMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_K8SMessage.Marshal(b, m, deterministic)
}
func (m *K8SMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_K8SMessage.Merge(m, src)
}
func (m *K8SMessage) XXX_Size() int {
	return xxx_messageInfo_K8SMessage.Size(m)
}
func (m *K8SMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_K8SMessage.DiscardUnknown(m)
}

var xxx_messageInfo_K8SMessage proto.InternalMessageInfo

func (m *K8SMessage) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *K8SMessage) GetTaskid() int64 {
	if m != nil {
		return m.Taskid
	}
	return 0
}

func (m *K8SMessage) GetTaskname() string {
	if m != nil {
		return m.Taskname
	}
	return ""
}

func (m *K8SMessage) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *K8SMessage) GetDatacenter() string {
	if m != nil {
		return m.Datacenter
	}
	return ""
}

func (m *K8SMessage) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *K8SMessage) GetReport() string {
	if m != nil {
		return m.Report
	}
	return ""
}

func init() {
	proto.RegisterType((*Event)(nil), "k8s.Event")
	proto.RegisterType((*Task)(nil), "k8s.Task")
	proto.RegisterType((*K8SMessage)(nil), "k8s.K8SMessage")
}

func init() { proto.RegisterFile("proto/k8s/k8s.proto", fileDescriptor_f5101ab27d64dc5d) }

var fileDescriptor_f5101ab27d64dc5d = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0x31, 0x4e, 0xc3, 0x30,
	0x14, 0x86, 0xe5, 0xa6, 0x4d, 0xc9, 0x1b, 0x00, 0x99, 0xaa, 0xb2, 0x2a, 0x84, 0xaa, 0x4c, 0x15,
	0x43, 0x83, 0x60, 0x89, 0x18, 0xd8, 0x3a, 0x45, 0x2c, 0xa1, 0x17, 0x78, 0xb4, 0x56, 0x14, 0x25,
	0xb5, 0x23, 0xdb, 0x45, 0xb0, 0x72, 0x05, 0x2e, 0xc1, 0x09, 0xb8, 0x08, 0x57, 0xe0, 0x20, 0xc8,
	0x2f, 0x06, 0x3a, 0x33, 0x44, 0x7a, 0xdf, 0xcb, 0xef, 0xa7, 0xcf, 0x7e, 0x70, 0xd6, 0x19, 0xed,
	0x74, 0xd6, 0xe4, 0xd6, 0x7f, 0x4b, 0x22, 0x1e, 0x35, 0xb9, 0x9d, 0x9d, 0x57, 0x5a, 0x57, 0xad,
	0xcc, 0xb0, 0xab, 0x33, 0x54, 0x4a, 0x3b, 0x74, 0xb5, 0x56, 0x21, 0x92, 0x8e, 0x61, 0xb4, 0x7a,
	0x92, 0xca, 0xa5, 0xef, 0x0c, 0x86, 0x6b, 0xb4, 0x0d, 0xe7, 0x30, 0x5c, 0xbf, 0x74, 0x52, 0xb0,
	0x39, 0x5b, 0x24, 0x25, 0xd5, 0x7c, 0x0a, 0xb1, 0x43, 0xdb, 0xd4, 0x5b, 0x31, 0x98, 0xb3, 0x45,
	0x54, 0x06, 0xe2, 0x33, 0x38, 0xf2, 0x15, 0xe5, 0x23, 0xca, 0xff, 0xb2, 0x9f, 0xa3, 0x70, 0x27,
	0xc5, 0xb0, 0x9f, 0xe3, 0x6b, 0x3e, 0x81, 0x51, 0xbd, 0xc3, 0x4a, 0x8a, 0x11, 0x35, 0x7b, 0xe0,
	0x02, 0xc6, 0x46, 0x76, 0x6d, 0xbd, 0x41, 0x11, 0xd3, 0xf8, 0x1f, 0xf4, 0x79, 0xf9, 0xec, 0x0c,
	0x8a, 0x71, 0x9f, 0x27, 0x48, 0x3f, 0x18, 0x40, 0x91, 0x3f, 0xdc, 0x4b, 0x6b, 0xfd, 0xf1, 0x7f,
	0x08, 0x93, 0xd8, 0x81, 0x30, 0xc9, 0x4d, 0x21, 0xb6, 0x0e, 0xdd, 0xde, 0x06, 0xe5, 0x40, 0xfc,
	0x02, 0x60, 0x8b, 0x0e, 0x37, 0x52, 0x39, 0x69, 0x82, 0xf9, 0x41, 0x87, 0x9f, 0x42, 0xb4, 0x37,
	0x2d, 0xa9, 0x27, 0xa5, 0x2f, 0xfd, 0x24, 0x23, 0x3b, 0x6d, 0x5c, 0xf0, 0x0e, 0x74, 0xbd, 0x82,
	0xa8, 0xc8, 0x2d, 0xbf, 0x83, 0xb8, 0xc8, 0xe9, 0xad, 0x4f, 0x96, 0x7e, 0x59, 0x7f, 0x77, 0x99,
	0x25, 0xd4, 0xf0, 0xff, 0xd2, 0xc9, 0xeb, 0xe7, 0xd7, 0xdb, 0xe0, 0x38, 0x4d, 0x68, 0xa9, 0xde,
	0xf2, 0x96, 0x5d, 0x2e, 0xd8, 0x15, 0x7b, 0x8c, 0x69, 0x75, 0x37, 0xdf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x7d, 0xc8, 0xb1, 0x41, 0xf4, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// K8SClient is the client API for K8S service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type K8SClient interface {
	// k8s task stream
	K8Task(ctx context.Context, opts ...grpc.CallOption) (K8S_K8TaskClient, error)
}

type k8SClient struct {
	cc *grpc.ClientConn
}

func NewK8SClient(cc *grpc.ClientConn) K8SClient {
	return &k8SClient{cc}
}

func (c *k8SClient) K8Task(ctx context.Context, opts ...grpc.CallOption) (K8S_K8TaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &_K8S_serviceDesc.Streams[0], "/k8s.K8s/K8Task", opts...)
	if err != nil {
		return nil, err
	}
	x := &k8SK8TaskClient{stream}
	return x, nil
}

type K8S_K8TaskClient interface {
	Send(*K8SMessage) error
	Recv() (*Task, error)
	grpc.ClientStream
}

type k8SK8TaskClient struct {
	grpc.ClientStream
}

func (x *k8SK8TaskClient) Send(m *K8SMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *k8SK8TaskClient) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// K8SServer is the server API for K8S service.
type K8SServer interface {
	// k8s task stream
	K8Task(K8S_K8TaskServer) error
}

func RegisterK8SServer(s *grpc.Server, srv K8SServer) {
	s.RegisterService(&_K8S_serviceDesc, srv)
}

func _K8S_K8Task_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(K8SServer).K8Task(&k8SK8TaskServer{stream})
}

type K8S_K8TaskServer interface {
	Send(*Task) error
	Recv() (*K8SMessage, error)
	grpc.ServerStream
}

type k8SK8TaskServer struct {
	grpc.ServerStream
}

func (x *k8SK8TaskServer) Send(m *Task) error {
	return x.ServerStream.SendMsg(m)
}

func (x *k8SK8TaskServer) Recv() (*K8SMessage, error) {
	m := new(K8SMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _K8S_serviceDesc = grpc.ServiceDesc{
	ServiceName: "k8s.K8s",
	HandlerType: (*K8SServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "K8Task",
			Handler:       _K8S_K8Task_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/k8s/k8s.proto",
}

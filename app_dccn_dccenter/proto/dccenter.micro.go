// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/dccenter.proto

/*
Package dccenter is a generated protocol buffer package.

It is generated from these files:
	proto/dccenter.proto

It has these top-level messages:
	Event
	DataCenterListRequest
	DataCenterInfo
	DataCenterListResponse
*/
package dccenter

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Dccenter service

type DccenterService interface {
	DataCenterList(ctx context.Context, in *DataCenterListRequest, opts ...client.CallOption) (*DataCenterListResponse, error)
}

type dccenterService struct {
	c    client.Client
	name string
}

func NewDccenterService(name string, c client.Client) DccenterService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "dccenter"
	}
	return &dccenterService{
		c:    c,
		name: name,
	}
}

func (c *dccenterService) DataCenterList(ctx context.Context, in *DataCenterListRequest, opts ...client.CallOption) (*DataCenterListResponse, error) {
	req := c.c.NewRequest(c.name, "Dccenter.DataCenterList", in)
	out := new(DataCenterListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Dccenter service

type DccenterHandler interface {
	DataCenterList(context.Context, *DataCenterListRequest, *DataCenterListResponse) error
}

func RegisterDccenterHandler(s server.Server, hdlr DccenterHandler, opts ...server.HandlerOption) error {
	type dccenter interface {
		DataCenterList(ctx context.Context, in *DataCenterListRequest, out *DataCenterListResponse) error
	}
	type Dccenter struct {
		dccenter
	}
	h := &dccenterHandler{hdlr}
	return s.Handle(s.NewHandler(&Dccenter{h}, opts...))
}

type dccenterHandler struct {
	DccenterHandler
}

func (h *dccenterHandler) DataCenterList(ctx context.Context, in *DataCenterListRequest, out *DataCenterListResponse) error {
	return h.DccenterHandler.DataCenterList(ctx, in, out)
}

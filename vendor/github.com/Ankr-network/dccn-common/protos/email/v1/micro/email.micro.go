// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: email/v1/micro/email.proto

/*
Package mail is a generated protocol buffer package.

It is generated from these files:
	email/v1/micro/email.proto

It has these top-level messages:
*/
package mail

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common_proto2 "github.com/Ankr-network/dccn-common/protos/common"
import common_proto3 "github.com/Ankr-network/dccn-common/protos/common"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = common_proto2.MailEvent{}
var _ = common_proto3.Error{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Mail service

type MailService interface {
	Send(ctx context.Context, in *common_proto2.MailEvent, opts ...client.CallOption) (*common_proto3.Error, error)
}

type mailService struct {
	c    client.Client
	name string
}

func NewMailService(name string, c client.Client) MailService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "mail"
	}
	return &mailService{
		c:    c,
		name: name,
	}
}

func (c *mailService) Send(ctx context.Context, in *common_proto2.MailEvent, opts ...client.CallOption) (*common_proto3.Error, error) {
	req := c.c.NewRequest(c.name, "Mail.Send", in)
	out := new(common_proto3.Error)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Mail service

type MailHandler interface {
	Send(context.Context, *common_proto2.MailEvent, *common_proto3.Error) error
}

func RegisterMailHandler(s server.Server, hdlr MailHandler, opts ...server.HandlerOption) error {
	type mail interface {
		Send(ctx context.Context, in *common_proto2.MailEvent, out *common_proto3.Error) error
	}
	type Mail struct {
		mail
	}
	h := &mailHandler{hdlr}
	return s.Handle(s.NewHandler(&Mail{h}, opts...))
}

type mailHandler struct {
	MailHandler
}

func (h *mailHandler) Send(ctx context.Context, in *common_proto2.MailEvent, out *common_proto3.Error) error {
	return h.MailHandler.Send(ctx, in, out)
}

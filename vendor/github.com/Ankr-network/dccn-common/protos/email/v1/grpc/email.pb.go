// Code generated by protoc-gen-go. DO NOT EDIT.
// source: email/v1/grpc/email.proto

package mail

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/Ankr-network/dccn-common/protos/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MailClient is the client API for Mail service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MailClient interface {
	Send(ctx context.Context, in *common.MailEvent, opts ...grpc.CallOption) (*common.Error, error)
}

type mailClient struct {
	cc *grpc.ClientConn
}

func NewMailClient(cc *grpc.ClientConn) MailClient {
	return &mailClient{cc}
}

func (c *mailClient) Send(ctx context.Context, in *common.MailEvent, opts ...grpc.CallOption) (*common.Error, error) {
	out := new(common.Error)
	err := c.cc.Invoke(ctx, "/mail.Mail/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailServer is the server API for Mail service.
type MailServer interface {
	Send(context.Context, *common.MailEvent) (*common.Error, error)
}

func RegisterMailServer(s *grpc.Server, srv MailServer) {
	s.RegisterService(&_Mail_serviceDesc, srv)
}

func _Mail_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.MailEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mail.Mail/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServer).Send(ctx, req.(*common.MailEvent))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mail_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mail.Mail",
	HandlerType: (*MailServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Mail_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "email/v1/grpc/email.proto",
}

func init() { proto.RegisterFile("email/v1/grpc/email.proto", fileDescriptor_email_31a0cd22dc556497) }

var fileDescriptor_email_31a0cd22dc556497 = []byte{
	// 118 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4c, 0xcd, 0x4d, 0xcc,
	0xcc, 0xd1, 0x2f, 0x33, 0xd4, 0x4f, 0x2f, 0x2a, 0x48, 0xd6, 0x07, 0xf3, 0xf4, 0x0a, 0x8a, 0xf2,
	0x4b, 0xf2, 0x85, 0x58, 0x40, 0x6c, 0x29, 0xa1, 0xe4, 0xfc, 0xdc, 0xdc, 0xfc, 0x3c, 0xfd, 0xd4,
	0xb2, 0xd4, 0xbc, 0x12, 0x88, 0x0c, 0x42, 0xac, 0xa8, 0x28, 0xbf, 0x08, 0x22, 0x66, 0x64, 0xc7,
	0xc5, 0xe2, 0x9b, 0x98, 0x99, 0x23, 0x64, 0xc6, 0xc5, 0x12, 0x9c, 0x9a, 0x97, 0x22, 0x24, 0xae,
	0x07, 0x51, 0x04, 0x91, 0xd6, 0x03, 0xc9, 0xb9, 0x82, 0x8c, 0x90, 0x12, 0x46, 0x95, 0x70, 0x05,
	0x99, 0xa1, 0xc4, 0x90, 0xc4, 0x06, 0xe6, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xad, 0x67,
	0xfb, 0xae, 0x91, 0x00, 0x00, 0x00,
}

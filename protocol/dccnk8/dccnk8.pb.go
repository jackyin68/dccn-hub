// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dccnk8.proto

package dccnk8

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The dccn hub sends message to the kubernetes cluster
type K8AddTaskRequest struct {
	Taskid               int64    `protobuf:"varint,1,opt,name=taskid,proto3" json:"taskid,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Extra                string   `protobuf:"bytes,3,opt,name=extra,proto3" json:"extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *K8AddTaskRequest) Reset()         { *m = K8AddTaskRequest{} }
func (m *K8AddTaskRequest) String() string { return proto.CompactTextString(m) }
func (*K8AddTaskRequest) ProtoMessage()    {}
func (*K8AddTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dccnk8_53ddbafc7be726d8, []int{0}
}
func (m *K8AddTaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_K8AddTaskRequest.Unmarshal(m, b)
}
func (m *K8AddTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_K8AddTaskRequest.Marshal(b, m, deterministic)
}
func (dst *K8AddTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_K8AddTaskRequest.Merge(dst, src)
}
func (m *K8AddTaskRequest) XXX_Size() int {
	return xxx_messageInfo_K8AddTaskRequest.Size(m)
}
func (m *K8AddTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_K8AddTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_K8AddTaskRequest proto.InternalMessageInfo

func (m *K8AddTaskRequest) GetTaskid() int64 {
	if m != nil {
		return m.Taskid
	}
	return 0
}

func (m *K8AddTaskRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *K8AddTaskRequest) GetExtra() string {
	if m != nil {
		return m.Extra
	}
	return ""
}

// The K8Task response message containing the success or failure
type K8AddTaskResponse struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *K8AddTaskResponse) Reset()         { *m = K8AddTaskResponse{} }
func (m *K8AddTaskResponse) String() string { return proto.CompactTextString(m) }
func (*K8AddTaskResponse) ProtoMessage()    {}
func (*K8AddTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dccnk8_53ddbafc7be726d8, []int{1}
}
func (m *K8AddTaskResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_K8AddTaskResponse.Unmarshal(m, b)
}
func (m *K8AddTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_K8AddTaskResponse.Marshal(b, m, deterministic)
}
func (dst *K8AddTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_K8AddTaskResponse.Merge(dst, src)
}
func (m *K8AddTaskResponse) XXX_Size() int {
	return xxx_messageInfo_K8AddTaskResponse.Size(m)
}
func (m *K8AddTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_K8AddTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_K8AddTaskResponse proto.InternalMessageInfo

func (m *K8AddTaskResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type K8CancelTaskRequest struct {
	Taskid               string   `protobuf:"bytes,1,opt,name=taskid,proto3" json:"taskid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *K8CancelTaskRequest) Reset()         { *m = K8CancelTaskRequest{} }
func (m *K8CancelTaskRequest) String() string { return proto.CompactTextString(m) }
func (*K8CancelTaskRequest) ProtoMessage()    {}
func (*K8CancelTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dccnk8_53ddbafc7be726d8, []int{2}
}
func (m *K8CancelTaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_K8CancelTaskRequest.Unmarshal(m, b)
}
func (m *K8CancelTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_K8CancelTaskRequest.Marshal(b, m, deterministic)
}
func (dst *K8CancelTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_K8CancelTaskRequest.Merge(dst, src)
}
func (m *K8CancelTaskRequest) XXX_Size() int {
	return xxx_messageInfo_K8CancelTaskRequest.Size(m)
}
func (m *K8CancelTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_K8CancelTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_K8CancelTaskRequest proto.InternalMessageInfo

func (m *K8CancelTaskRequest) GetTaskid() string {
	if m != nil {
		return m.Taskid
	}
	return ""
}

// The K8Task response message containing the success or failure
type K8CancelTaskResponse struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *K8CancelTaskResponse) Reset()         { *m = K8CancelTaskResponse{} }
func (m *K8CancelTaskResponse) String() string { return proto.CompactTextString(m) }
func (*K8CancelTaskResponse) ProtoMessage()    {}
func (*K8CancelTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dccnk8_53ddbafc7be726d8, []int{3}
}
func (m *K8CancelTaskResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_K8CancelTaskResponse.Unmarshal(m, b)
}
func (m *K8CancelTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_K8CancelTaskResponse.Marshal(b, m, deterministic)
}
func (dst *K8CancelTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_K8CancelTaskResponse.Merge(dst, src)
}
func (m *K8CancelTaskResponse) XXX_Size() int {
	return xxx_messageInfo_K8CancelTaskResponse.Size(m)
}
func (m *K8CancelTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_K8CancelTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_K8CancelTaskResponse proto.InternalMessageInfo

func (m *K8CancelTaskResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type K8TaskStatusRequest struct {
	Taskid               int64    `protobuf:"varint,1,opt,name=taskid,proto3" json:"taskid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *K8TaskStatusRequest) Reset()         { *m = K8TaskStatusRequest{} }
func (m *K8TaskStatusRequest) String() string { return proto.CompactTextString(m) }
func (*K8TaskStatusRequest) ProtoMessage()    {}
func (*K8TaskStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dccnk8_53ddbafc7be726d8, []int{4}
}
func (m *K8TaskStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_K8TaskStatusRequest.Unmarshal(m, b)
}
func (m *K8TaskStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_K8TaskStatusRequest.Marshal(b, m, deterministic)
}
func (dst *K8TaskStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_K8TaskStatusRequest.Merge(dst, src)
}
func (m *K8TaskStatusRequest) XXX_Size() int {
	return xxx_messageInfo_K8TaskStatusRequest.Size(m)
}
func (m *K8TaskStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_K8TaskStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_K8TaskStatusRequest proto.InternalMessageInfo

func (m *K8TaskStatusRequest) GetTaskid() int64 {
	if m != nil {
		return m.Taskid
	}
	return 0
}

// The K8Task response message containing the success or failure
type K8TaskStatusResponse struct {
	Taskid               string   `protobuf:"bytes,1,opt,name=taskid,proto3" json:"taskid,omitempty"`
	Status               string   `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Report               string   `protobuf:"bytes,3,opt,name=report,proto3" json:"report,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *K8TaskStatusResponse) Reset()         { *m = K8TaskStatusResponse{} }
func (m *K8TaskStatusResponse) String() string { return proto.CompactTextString(m) }
func (*K8TaskStatusResponse) ProtoMessage()    {}
func (*K8TaskStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dccnk8_53ddbafc7be726d8, []int{5}
}
func (m *K8TaskStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_K8TaskStatusResponse.Unmarshal(m, b)
}
func (m *K8TaskStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_K8TaskStatusResponse.Marshal(b, m, deterministic)
}
func (dst *K8TaskStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_K8TaskStatusResponse.Merge(dst, src)
}
func (m *K8TaskStatusResponse) XXX_Size() int {
	return xxx_messageInfo_K8TaskStatusResponse.Size(m)
}
func (m *K8TaskStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_K8TaskStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_K8TaskStatusResponse proto.InternalMessageInfo

func (m *K8TaskStatusResponse) GetTaskid() string {
	if m != nil {
		return m.Taskid
	}
	return ""
}

func (m *K8TaskStatusResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *K8TaskStatusResponse) GetReport() string {
	if m != nil {
		return m.Report
	}
	return ""
}

func init() {
	proto.RegisterType((*K8AddTaskRequest)(nil), "dccnk8.K8AddTaskRequest")
	proto.RegisterType((*K8AddTaskResponse)(nil), "dccnk8.K8AddTaskResponse")
	proto.RegisterType((*K8CancelTaskRequest)(nil), "dccnk8.K8CancelTaskRequest")
	proto.RegisterType((*K8CancelTaskResponse)(nil), "dccnk8.K8CancelTaskResponse")
	proto.RegisterType((*K8TaskStatusRequest)(nil), "dccnk8.K8TaskStatusRequest")
	proto.RegisterType((*K8TaskStatusResponse)(nil), "dccnk8.K8TaskStatusResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Dccnk8Client is the client API for Dccnk8 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Dccnk8Client interface {
	// Sends request to start a task to kubernetes cluster in the data center after deciding
	K8AddTask(ctx context.Context, in *K8AddTaskRequest, opts ...grpc.CallOption) (*K8AddTaskResponse, error)
	K8CancelTask(ctx context.Context, in *K8CancelTaskRequest, opts ...grpc.CallOption) (*K8CancelTaskResponse, error)
	K8TaskStatus(ctx context.Context, in *K8TaskStatusRequest, opts ...grpc.CallOption) (*K8TaskStatusResponse, error)
}

type dccnk8Client struct {
	cc *grpc.ClientConn
}

func NewDccnk8Client(cc *grpc.ClientConn) Dccnk8Client {
	return &dccnk8Client{cc}
}

func (c *dccnk8Client) K8AddTask(ctx context.Context, in *K8AddTaskRequest, opts ...grpc.CallOption) (*K8AddTaskResponse, error) {
	out := new(K8AddTaskResponse)
	err := c.cc.Invoke(ctx, "/dccnk8.dccnk8/K8AddTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dccnk8Client) K8CancelTask(ctx context.Context, in *K8CancelTaskRequest, opts ...grpc.CallOption) (*K8CancelTaskResponse, error) {
	out := new(K8CancelTaskResponse)
	err := c.cc.Invoke(ctx, "/dccnk8.dccnk8/K8CancelTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dccnk8Client) K8TaskStatus(ctx context.Context, in *K8TaskStatusRequest, opts ...grpc.CallOption) (*K8TaskStatusResponse, error) {
	out := new(K8TaskStatusResponse)
	err := c.cc.Invoke(ctx, "/dccnk8.dccnk8/K8TaskStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Dccnk8Server is the server API for Dccnk8 service.
type Dccnk8Server interface {
	// Sends request to start a task to kubernetes cluster in the data center after deciding
	K8AddTask(context.Context, *K8AddTaskRequest) (*K8AddTaskResponse, error)
	K8CancelTask(context.Context, *K8CancelTaskRequest) (*K8CancelTaskResponse, error)
	K8TaskStatus(context.Context, *K8TaskStatusRequest) (*K8TaskStatusResponse, error)
}

func RegisterDccnk8Server(s *grpc.Server, srv Dccnk8Server) {
	s.RegisterService(&_Dccnk8_serviceDesc, srv)
}

func _Dccnk8_K8AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8AddTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Dccnk8Server).K8AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dccnk8.dccnk8/K8AddTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Dccnk8Server).K8AddTask(ctx, req.(*K8AddTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dccnk8_K8CancelTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8CancelTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Dccnk8Server).K8CancelTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dccnk8.dccnk8/K8CancelTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Dccnk8Server).K8CancelTask(ctx, req.(*K8CancelTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dccnk8_K8TaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8TaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Dccnk8Server).K8TaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dccnk8.dccnk8/K8TaskStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Dccnk8Server).K8TaskStatus(ctx, req.(*K8TaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dccnk8_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dccnk8.dccnk8",
	HandlerType: (*Dccnk8Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "K8AddTask",
			Handler:    _Dccnk8_K8AddTask_Handler,
		},
		{
			MethodName: "K8CancelTask",
			Handler:    _Dccnk8_K8CancelTask_Handler,
		},
		{
			MethodName: "K8TaskStatus",
			Handler:    _Dccnk8_K8TaskStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dccnk8.proto",
}

func init() { proto.RegisterFile("dccnk8.proto", fileDescriptor_dccnk8_53ddbafc7be726d8) }

var fileDescriptor_dccnk8_53ddbafc7be726d8 = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x31, 0x4f, 0xf3, 0x30,
	0x18, 0x84, 0x9b, 0xf6, 0xfb, 0x22, 0xe5, 0xa5, 0x03, 0x98, 0x0a, 0x42, 0x61, 0xa8, 0x3c, 0x45,
	0x42, 0x64, 0x80, 0x25, 0x2b, 0x81, 0x2d, 0x4b, 0x15, 0x3a, 0x23, 0x19, 0xc7, 0x42, 0x55, 0xda,
	0xd8, 0xd8, 0xae, 0xd4, 0x5f, 0xcc, 0xef, 0x40, 0x76, 0x0c, 0x71, 0x49, 0x10, 0x6c, 0x39, 0xfb,
	0xf2, 0xf8, 0x7c, 0x7e, 0x61, 0x5a, 0x51, 0xda, 0xd4, 0x59, 0x2a, 0x24, 0xd7, 0x1c, 0x85, 0xad,
	0xc2, 0x2b, 0x38, 0x2e, 0xb2, 0xfb, 0xaa, 0x5a, 0x11, 0x55, 0x97, 0xec, 0x6d, 0xc7, 0x94, 0x46,
	0x67, 0x10, 0x6a, 0xa2, 0xea, 0x75, 0x15, 0x07, 0x8b, 0x20, 0x99, 0x94, 0x4e, 0x21, 0x04, 0xff,
	0x1a, 0xb2, 0x65, 0xf1, 0x78, 0x11, 0x24, 0x51, 0x69, 0xbf, 0xd1, 0x0c, 0xfe, 0xb3, 0xbd, 0x96,
	0x24, 0x9e, 0xd8, 0xc5, 0x56, 0xe0, 0x6b, 0x38, 0xf1, 0xa8, 0x4a, 0xf0, 0x46, 0x31, 0x83, 0x55,
	0x9a, 0xe8, 0x9d, 0xb2, 0xd8, 0xa8, 0x74, 0x0a, 0xdf, 0xc0, 0x69, 0x91, 0x3d, 0x90, 0x86, 0xb2,
	0xcd, 0xcf, 0x29, 0xa2, 0xcf, 0x14, 0x38, 0x85, 0xd9, 0xa1, 0xfd, 0x2f, 0x78, 0xe3, 0x7c, 0xb2,
	0xfa, 0x97, 0x4b, 0xe2, 0x67, 0x83, 0xf7, 0xed, 0x1d, 0x7e, 0x28, 0x8e, 0x77, 0xec, 0xd8, 0x3f,
	0xd6, 0xac, 0x4b, 0x26, 0xb8, 0xd4, 0xae, 0x19, 0xa7, 0x6e, 0xdf, 0x03, 0x70, 0xdd, 0xa3, 0x1c,
	0xa2, 0xaf, 0x96, 0x50, 0x9c, 0xba, 0xf7, 0xf9, 0xfe, 0x1c, 0xf3, 0x8b, 0x81, 0x9d, 0x36, 0x14,
	0x1e, 0xa1, 0x02, 0xa6, 0x7e, 0x1b, 0xe8, 0xb2, 0x33, 0xf7, 0x2a, 0x9d, 0x5f, 0x0d, 0x6f, 0x1e,
	0xc2, 0xba, 0xbb, 0xfb, 0xb0, 0x5e, 0x81, 0x3e, 0xac, 0x5f, 0x17, 0x1e, 0xe5, 0x09, 0x9c, 0xaf,
	0x79, 0xfa, 0x2a, 0x05, 0x4d, 0xd9, 0x9e, 0x6c, 0xc5, 0x86, 0x29, 0xf7, 0x47, 0x7e, 0xf4, 0x48,
	0x69, 0x53, 0x64, 0x4b, 0x33, 0x89, 0xcb, 0xe0, 0x25, 0xb4, 0x23, 0x79, 0xf7, 0x11, 0x00, 0x00,
	0xff, 0xff, 0xcc, 0x79, 0xe0, 0x15, 0xa2, 0x02, 0x00, 0x00,
}

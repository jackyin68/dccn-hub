// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: stream.proto

/*
Package example_streamer is a generated protocol buffer package.

It is generated from these files:
	stream.proto

It has these top-level messages:
	Task
*/
package example_streamer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Streamer service

type StreamerService interface {
	ServerStream(ctx context.Context, opts ...client.CallOption) (Streamer_ServerStreamService, error)
}

type streamerService struct {
	c    client.Client
	name string
}

func NewStreamerService(name string, c client.Client) StreamerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "example.streamer"
	}
	return &streamerService{
		c:    c,
		name: name,
	}
}

func (c *streamerService) ServerStream(ctx context.Context, opts ...client.CallOption) (Streamer_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "Streamer.ServerStream", &Task{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &streamerServiceServerStream{stream}, nil
}

type Streamer_ServerStreamService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Task) error
	Recv() (*Task, error)
}

type streamerServiceServerStream struct {
	stream client.Stream
}

func (x *streamerServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *streamerServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *streamerServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *streamerServiceServerStream) Send(m *Task) error {
	return x.stream.Send(m)
}

func (x *streamerServiceServerStream) Recv() (*Task, error) {
	m := new(Task)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Streamer service

type StreamerHandler interface {
	ServerStream(context.Context, Streamer_ServerStreamStream) error
}

func RegisterStreamerHandler(s server.Server, hdlr StreamerHandler, opts ...server.HandlerOption) error {
	type streamer interface {
		ServerStream(ctx context.Context, stream server.Stream) error
	}
	type Streamer struct {
		streamer
	}
	h := &streamerHandler{hdlr}
	return s.Handle(s.NewHandler(&Streamer{h}, opts...))
}

type streamerHandler struct {
	StreamerHandler
}

func (h *streamerHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	return h.StreamerHandler.ServerStream(ctx, &streamerServerStreamStream{stream})
}

type Streamer_ServerStreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Task) error
	Recv() (*Task, error)
}

type streamerServerStreamStream struct {
	stream server.Stream
}

func (x *streamerServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *streamerServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *streamerServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *streamerServerStreamStream) Send(m *Task) error {
	return x.stream.Send(m)
}

func (x *streamerServerStreamStream) Recv() (*Task, error) {
	m := new(Task)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

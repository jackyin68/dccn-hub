// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stream.proto

package example_streamer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Task struct {
	Count                int64    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Age                  int32    `protobuf:"varint,3,opt,name=age,proto3" json:"age,omitempty"`
	Flag                 string   `protobuf:"bytes,4,opt,name=flag,proto3" json:"flag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_d7ebd5874ce180e4, []int{0}
}
func (m *Task) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Task.Unmarshal(m, b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Task.Marshal(b, m, deterministic)
}
func (dst *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(dst, src)
}
func (m *Task) XXX_Size() int {
	return xxx_messageInfo_Task.Size(m)
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Task) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Task) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *Task) GetFlag() string {
	if m != nil {
		return m.Flag
	}
	return ""
}

func init() {
	proto.RegisterType((*Task)(nil), "example.streamer.Task")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StreamerClient is the client API for Streamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamerClient interface {
	ServerStream(ctx context.Context, opts ...grpc.CallOption) (Streamer_ServerStreamClient, error)
}

type streamerClient struct {
	cc *grpc.ClientConn
}

func NewStreamerClient(cc *grpc.ClientConn) StreamerClient {
	return &streamerClient{cc}
}

func (c *streamerClient) ServerStream(ctx context.Context, opts ...grpc.CallOption) (Streamer_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Streamer_serviceDesc.Streams[0], "/example.streamer.Streamer/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamerServerStreamClient{stream}
	return x, nil
}

type Streamer_ServerStreamClient interface {
	Send(*Task) error
	Recv() (*Task, error)
	grpc.ClientStream
}

type streamerServerStreamClient struct {
	grpc.ClientStream
}

func (x *streamerServerStreamClient) Send(m *Task) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamerServerStreamClient) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamerServer is the server API for Streamer service.
type StreamerServer interface {
	ServerStream(Streamer_ServerStreamServer) error
}

func RegisterStreamerServer(s *grpc.Server, srv StreamerServer) {
	s.RegisterService(&_Streamer_serviceDesc, srv)
}

func _Streamer_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamerServer).ServerStream(&streamerServerStreamServer{stream})
}

type Streamer_ServerStreamServer interface {
	Send(*Task) error
	Recv() (*Task, error)
	grpc.ServerStream
}

type streamerServerStreamServer struct {
	grpc.ServerStream
}

func (x *streamerServerStreamServer) Send(m *Task) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamerServerStreamServer) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Streamer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.streamer.Streamer",
	HandlerType: (*StreamerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _Streamer_ServerStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream.proto",
}

func init() { proto.RegisterFile("stream.proto", fileDescriptor_stream_d7ebd5874ce180e4) }

var fileDescriptor_stream_d7ebd5874ce180e4 = []byte{
	// 164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x2e, 0x29, 0x4a,
	0x4d, 0xcc, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x48, 0xad, 0x48, 0xcc, 0x2d, 0xc8,
	0x49, 0xd5, 0x83, 0x88, 0xa6, 0x16, 0x29, 0x85, 0x71, 0xb1, 0x84, 0x24, 0x16, 0x67, 0x0b, 0x89,
	0x70, 0xb1, 0x26, 0xe7, 0x97, 0xe6, 0x95, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x30, 0x07, 0x41, 0x38,
	0x42, 0x42, 0x5c, 0x2c, 0x79, 0x89, 0xb9, 0xa9, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60,
	0xb6, 0x90, 0x00, 0x17, 0x73, 0x62, 0x7a, 0xaa, 0x04, 0xb3, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x88,
	0x09, 0x52, 0x95, 0x96, 0x93, 0x98, 0x2e, 0xc1, 0x02, 0x51, 0x05, 0x62, 0x1b, 0x05, 0x70, 0x71,
	0x04, 0x43, 0xed, 0x10, 0x72, 0xe1, 0xe2, 0x09, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0x82, 0x88, 0x08,
	0x89, 0xe9, 0xa1, 0x3b, 0x43, 0x0f, 0xe4, 0x06, 0x29, 0x1c, 0xe2, 0x4a, 0x0c, 0x1a, 0x8c, 0x06,
	0x8c, 0x49, 0x6c, 0x60, 0x2f, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc4, 0x07, 0x45, 0x98,
	0xd2, 0x00, 0x00, 0x00,
}
